{
    "examples": [
      {
        "input": "async function fetchNotifications(api) { return await api.getNotifications(); } test('should fetch notifications', async () => { const api = new NotificationService(); const notifications = await fetchNotifications(api); expect(notifications.length).toBe(2); });",
        "output": "Add Mock: Using in-memory cache to mock notifications fetching."
      },
      {
        "input": "test('should load user profile', async () => { const profile = await api.getUserProfile(); expect(profile.name).toBe('John Doe'); });",
        "output": "Add Mock: Mock the API response to return a user profile."
      },
      {
        "input": "test('should wait for button to appear', async () => { const button = document.querySelector('#submit-button'); expect(button).not.toBeNull(); });",
        "output": "Add/Adjust Wait: Add an explicit wait for the button to load."
      },
      {
        "input": "test('should show error message on failure', async () => { await api.submitForm(); const errorMessage = document.querySelector('.error').textContent; expect(errorMessage).toBe('Submission failed'); });",
        "output": "Add/Adjust Wait: Add wait for the error message to be displayed after form submission."
      },
      {
        "input": "test('should load recent activities', async () => { const activities = await api.getActivities(); expect(activities.length).toBeGreaterThan(0); });",
        "output": "Add Mock: Mock recent activities API response with sample data."
      },
      {
        "input": "test('should timeout if the request is too long', async () => { const response = await api.getSlowData(); expect(response).toBe(null); });",
        "output": "Handle Timeout: Set a timeout to handle long-running requests."
      },
      {
        "input": "test('should fetch all posts', async () => { const posts = await api.getPosts(); expect(posts.length).toBe(10); });",
        "output": "Add Mock: Mock API to return a predefined number of posts."
      },
      {
        "input": "test('should isolate session data for each user', async () => { const user1 = await api.getUserSession('user1'); const user2 = await api.getUserSession('user2'); expect(user1).not.toBe(user2); });",
        "output": "Isolate State: Ensure each test case has its own isolated session state."
      },
      {
        "input": "test('should fetch comments for post', async () => { const comments = await api.getComments(123); expect(comments.length).toBe(5); });",
        "output": "Add Mock: Mock the API response for comments."
      },
      {
        "input": "test('should upload file successfully', async () => { const result = await api.uploadFile(file); expect(result.status).toBe('success'); });",
        "output": "Manage Resource: Clean up file uploads after the test."
      },
      {
        "input": "test('should render user dashboard', async () => { const dashboard = document.querySelector('.dashboard'); expect(dashboard).toBeDefined(); });",
        "output": "Add/Adjust Wait: Add wait to ensure the dashboard is fully rendered."
      },
      {
        "input": "test('should delete item from cart', async () => { await api.deleteCartItem(1); const cartItems = await api.getCartItems(); expect(cartItems.length).toBe(0); });",
        "output": "Add Mock: Mock cart deletion API."
      },
      {
        "input": "test('should log user out', async () => { await api.logout(); const session = await api.getSession(); expect(session).toBeNull(); });",
        "output": "Isolate State: Ensure session state is cleared between tests."
      },
      {
        "input": "test('should save form data', async () => { await api.saveFormData(formData); const savedData = await api.getFormData(); expect(savedData).toEqual(formData); });",
        "output": "Add Mock: Mock form data API."
      },
      {
        "input": "test('should search for products', async () => { const results = await api.searchProducts('phone'); expect(results.length).toBeGreaterThan(0); });",
        "output": "Add Mock: Mock search API with predefined results."
      },
      {
        "input": "test('should show confirmation modal', async () => { const modal = document.querySelector('.modal'); expect(modal).toBeVisible(); });",
        "output": "Add/Adjust Wait: Add wait to ensure the modal is displayed."
      },
      {
        "input": "test('should display user avatar', async () => { const avatar = document.querySelector('.avatar img'); expect(avatar.src).toBe('/images/avatar.png'); });",
        "output": "Manage Resource: Ensure image resources are properly loaded."
      },
      {
        "input": "test('should retrieve search results', async () => { const results = await api.getSearchResults(); expect(results).toBeDefined(); });",
        "output": "Handle Timeout: Handle slow search results with a timeout."
      },
      {
        "input": "test('should process payment successfully', async () => { const result = await api.processPayment(paymentDetails); expect(result.status).toBe('success'); });",
        "output": "Add Mock: Mock payment processing API."
      },
      {
        "input": "test('should show order history', async () => { const orders = await api.getOrderHistory(); expect(orders.length).toBeGreaterThan(0); });",
        "output": "Add Mock: Mock order history API response."
      },
      {
        "input": "test('should display product image', async () => { const image = document.querySelector('.product-image'); expect(image.src).toContain('product.jpg'); });",
        "output": "Add/Adjust Wait: Add wait for image to load completely."
      },
      {
        "input": "test('should log error on failed login', async () => { const result = await api.login('user', 'wrong-password'); expect(result.error).toBeDefined(); });",
        "output": "Add Mock: Mock failed login response."
      },
      {
        "input": "test('should fetch post details', async () => { const post = await api.getPostDetails(1); expect(post.title).toBe('Sample Post'); });",
        "output": "Add Mock: Mock post details API."
      },
      {
        "input": "test('should handle slow network for data fetch', async () => { const data = await api.getSlowData(); expect(data).toBeDefined(); });",
        "output": "Handle Timeout: Set a timeout for slow network conditions."
      },
      {
        "input": "test('should fetch user notifications', async () => { const notifications = await api.getNotifications(); expect(notifications.length).toBeGreaterThan(0); });",
        "output": "Add Mock: Mock notification fetch API."
      },
      {
        "input": "test('should send email notification', async () => { const result = await api.sendEmailNotification(emailDetails); expect(result.status).toBe('sent'); });",
        "output": "Add Mock: Mock email notification API."
      },
      {
        "input": "test('should add item to wishlist', async () => { await api.addToWishlist(1); const wishlist = await api.getWishlist(); expect(wishlist).toContain(1); });",
        "output": "Add Mock: Mock wishlist API response."
      },
      {
        "input": "test('should remove item from wishlist', async () => { await api.removeFromWishlist(1); const wishlist = await api.getWishlist(); expect(wishlist).not.toContain(1); });",
        "output": "Add Mock: Mock remove from wishlist API."
      },
      {
        "input": "test('should return filtered list of users', async () => { const users = await api.getFilteredUsers({ role: 'admin' }); expect(users.length).toBeGreaterThan(0); });",
        "output": "Add Mock: Mock filtered user list API response."
      },
      {
        "input": "test('should update user profile', async () => { await api.updateUserProfile(profileData); const updatedProfile = await api.getUserProfile(); expect(updatedProfile).toEqual(profileData); });",
        "output": "Add Mock: Mock update user profile API."
      },
      {
        "input": "test('should fetch paginated data', async () => { const page1 = await api.getDataPage(1); expect(page1.data.length).toBe(10); });",
        "output": "Add Mock: Mock paginated data API."
      },
      {
        "input": "test('should cancel order', async () => { await api.cancelOrder(1); const order = await api.getOrder(1); expect(order.status).toBe('cancelled'); });",
        "output": "Add Mock: Mock order cancellation API."
      },
      {
        "input": "test('should fetch product details', async () => { const product = await api.getProductDetails(1); expect(product.name).toBe('Phone'); });",
        "output": "Add Mock: Mock product details API."
      },
      {
        "input": "test('should handle retry on network failure', async () => { const result = await api.retryRequest(); expect(result).toBeDefined(); });",
        "output": "Handle Timeout: Add retry mechanism for network failures."
      },
      {
        "input": "test('should load chat messages', async () => { const messages = await api.getChatMessages(); expect(messages.length).toBeGreaterThan(0); });",
        "output": "Add Mock: Mock chat messages API."
      },
      {
        "input": "test('should add item to cart', async () => { await api.addItemToCart(1); const cartItems = await api.getCartItems(); expect(cartItems).toContain(1); });",
        "output": "Add Mock: Mock add to cart API."
      },
      {
        "input": "test('should retry on failed payment', async () => { const result = await api.retryPayment(paymentDetails); expect(result.status).toBe('success'); });",
        "output": "Handle Timeout: Add retry mechanism for failed payments."
      },
      {
        "input": "test('should fetch user activities', async () => { const activities = await api.getUserActivities(); expect(activities.length).toBeGreaterThan(0); });",
        "output": "Add Mock: Mock user activities API response."
      },
      {
        "input": "test('should load notifications', async () => { const notifications = await api.getNotifications(); expect(notifications.length).toBe(0); });",
        "output": "Widen Assertion: Expect notifications length to be greater than or equal to 0."
      },
      {
        "input": "test('should show loading spinner while waiting', async () => { const spinner = document.querySelector('.loading-spinner'); expect(spinner).toBeVisible(); });",
        "output": "Add/Adjust Wait: Add explicit wait for spinner to appear."
      },
      {
        "input": "test('should fetch trending topics', async () => { const topics = await api.getTrendingTopics(); expect(topics.length).toBeGreaterThan(0); });",
        "output": "Add Mock: Mock trending topics API response."
      },
      {
        "input": "test('should isolate cart state between tests', async () => { const user1Cart = await api.getUserCart('user1'); const user2Cart = await api.getUserCart('user2'); expect(user1Cart).not.toBe(user2Cart); });",
        "output": "Isolate State: Ensure isolated cart state between users."
      },
      {
        "input": "test('should logout user after session expires', async () => { const result = await api.autoLogout(); expect(result.status).toBe('logged out'); });",
        "output": "Handle Timeout: Set session timeout for auto-logout."
      },
      {
        "input": "test('should fetch latest posts', async () => { const posts = await api.getLatestPosts(); expect(posts.length).toBeGreaterThan(0); });",
        "output": "Add Mock: Mock latest posts API response."
      }
    ]
  }